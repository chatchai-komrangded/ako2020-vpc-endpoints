{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template creates a two-AZ, public and private subnet VPC infrastructure with managed NAT gateways in the public subnet for each Availability Zone. Environment is intended to be deployed in us-west-2.  Template also deploys a Cloud9 instance, 2 EC2 instances, a Gateway(S3) endpoint, an interface endpoint (SQS), IAM Roles for use by the EC2 instances, two S3 buckets and an SQS queue. **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack from this template. ",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Availability Zone Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "NumberOfAZs"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCCIDR",
                        "PublicSubnet1CIDR",
                        "PublicSubnet2CIDR",
                        "PublicSubnetTag1",
                        "PublicSubnetTag2",
                        "CreatePrivateSubnets",
                        "PrivateSubnet1ACIDR",
                        "PrivateSubnet2ACIDR",
                        "PrivateSubnetATag1",
                        "PrivateSubnetATag2",
                        "CreateAdditionalPrivateSubnets",
                        "VPCTenancy"
                    ]
                },
                {
                    "Label": {
                        "default": "Deprecated: NAT Instance Configuration"
                    },
                    "Parameters": [
                        "KeyPairName",
                        "NATInstanceType"
                    ]
                }
            ],
            "ParameterLabels": {
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "CreateAdditionalPrivateSubnets": {
                    "default": "Create additional private subnets with dedicated network ACLs"
                },
                "CreatePrivateSubnets": {
                    "default": "Create private subnets"
                },
                "KeyPairName": {
                    "default": "Deprecated: Key pair name"
                },
                "NATInstanceType": {
                    "default": "Deprecated: NAT instance type"
                },
                "NumberOfAZs": {
                    "default": "Number of Availability Zones"
                },
                "PrivateSubnet1ACIDR": {
                    "default": "Private subnet 1A CIDR"
                },
                "PrivateSubnet2ACIDR": {
                    "default": "Private subnet 2A CIDR"
                },
                "PrivateSubnetATag1": {
                    "default": "Tag for Private A Subnets"
                },
                "PrivateSubnetATag2": {
                    "default": "Tag for Private A Subnets"
                },
                "PublicSubnet1CIDR": {
                    "default": "Public subnet 1 CIDR"
                },
                "PublicSubnet2CIDR": {
                    "default": "Public subnet 2 CIDR"
                },
                "PublicSubnetTag1": {
                    "default": "Tag for Public Subnets"
                },
                "PublicSubnetTag2": {
                    "default": "Tag for Public Subnets"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "VPCTenancy": {
                    "default": "VPC Tenancy"
                }
            }
        }
    },
    "Parameters": {
        "AppName1": {
            "Description": "Name to be used with EC2 Instance, Role, and Security Group",
            "Type": "String",
            "Default": "salesapp"
        },
        "AppName2": {
            "Description": "Name to be used with EC2 Instance, Role, and Security Group",
            "Type": "String",
            "Default": "reportsengine"
        },
        "AvailabilityZones": {
            "Description": "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "Default": "us-west-2a,us-west-2b"
        },
        "CreateAdditionalPrivateSubnets": {
            "AllowedValues": [
                "false"
            ],
            "Default": "false",
            "Description": "Set to true to create a network ACL protected subnet in each Availability Zone. If false, the CIDR parameters for those subnets will be ignored. If true, it also requires that the 'Create private subnets' parameter is also true to have any effect.",
            "Type": "String"
        },
        "CreatePrivateSubnets": {
            "AllowedValues": [
                "true"
            ],
            "Default": "true",
            "Description": "Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored.",
            "Type": "String"
        },
        "NumberOfAZs": {
            "AllowedValues": [
                "2"
            ],
            "Default": "2",
            "Description": "Number of Availability Zones to use in the VPC. This must match your selections in the list of Availability Zones parameter.",
            "Type": "String"
        },
        "PrivateSubnet1ACIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.1.0/24",
            "Description": "CIDR block for private subnet 1A located in Availability Zone 1",
            "Type": "String"
        },
        "PrivateSubnet2ACIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.2.0/24",
            "Description": "CIDR block for private subnet 2A located in Availability Zone 2",
            "Type": "String"
        },
        "PrivateSubnetATag1": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Private",
            "Description": "tag to add to private subnets A, in format Key=Value (Optional)",
            "Type": "String"
        },
        "PrivateSubnetATag2": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "",
            "Description": "tag to add to private subnets A, in format Key=Value (Optional)",
            "Type": "String"
        },
        "PublicSubnet1CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.3.0/25",
            "Description": "CIDR block for the public DMZ subnet 1 located in Availability Zone 1",
            "Type": "String"
        },
        "PublicSubnet2CIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.4.0/25",
            "Description": "CIDR block for the public DMZ subnet 2 located in Availability Zone 2",
            "Type": "String"
        },
        "PublicSubnetTag1": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "Network=Public",
            "Description": "tag to add to public subnets, in format Key=Value (Optional)",
            "Type": "String"
        },
        "PublicSubnetTag2": {
            "AllowedPattern": "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$",
            "ConstraintDescription": "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]",
            "Default": "",
            "Description": "tag to add to public subnets, in format Key=Value (Optional)",
            "Type": "String"
        },
        "VPCCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
            "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
            "Default": "10.0.0.0/16",
            "Description": "CIDR block for the VPC",
            "Type": "String"
        },
        "VPCTenancy": {
            "AllowedValues": [
                "default",
                "dedicated"
            ],
            "Default": "default",
            "Description": "The allowed tenancy of instances launched into the VPC",
            "Type": "String"
        },
        "LatestAmiId": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs"
        },
        "keypairName": {
            "Description": "The name of the SSH key to be created",
            "Type": "String",
            "Default": "lab"
        },
        "ModuleName": {
            "Description": "The name of the JavaScript file",
            "Type": "String",
            "Default": "index"
        },
        "S3Bucket": {
            "Description": "The name of the bucket that contains your packaged source",
            "Type": "String",
            "Default": "vpc-endpoints-lab"
        },
        "S3Key": {
            "Description": "The name of the ZIP package",
            "Type": "String",
            "Default": "keypaircreatecustomresourcefunction.zip"
        }
    },
    "Conditions": {
        "GovCloudCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-gov-west-1"
            ]
        },
        "NVirginiaRegionCondition": {
            "Fn::Equals": [
                {
                    "Ref": "AWS::Region"
                },
                "us-east-1"
            ]
        },
        "PrivateSubnetsCondition": {
            "Fn::Equals": [
                {
                    "Ref": "CreatePrivateSubnets"
                },
                "true"
            ]
        },
        "PrivateSubnetATag1Condition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PrivateSubnetATag1"
                        },
                        ""
                    ]
                }
            ]
        },
        "PrivateSubnetATag2Condition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PrivateSubnetATag2"
                        },
                        ""
                    ]
                }
            ]
        },
        "PublicSubnetTag1Condition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PublicSubnetTag1"
                        },
                        ""
                    ]
                }
            ]
        },
        "PublicSubnetTag2Condition": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "PublicSubnetTag2"
                        },
                        ""
                    ]
                }
            ]
        }
    },
    "Resources": {
        "DHCPOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": {
                    "Fn::If": [
                        "NVirginiaRegionCondition",
                        "ec2.internal",
                        {
                            "Fn::Sub": "${AWS::Region}.compute.internal"
                        }
                    ]
                },
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            }
        },
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "InstanceTenancy": {
                    "Ref": "VPCTenancy"
                },
                "EnableDnsSupport": true,
                "EnableDnsHostnames": true,
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "VPCDHCPOptionsAssociation": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "DhcpOptionsId": {
                    "Ref": "DHCPOptions"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PrivateSubnet1A": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet1ACIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 1A"
                    },
                    {
                        "Fn::If": [
                            "PrivateSubnetATag1Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag1"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag1"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PrivateSubnetATag2Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag2"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag2"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ]
            }
        },
        "PrivateSubnet2A": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrivateSubnet2ACIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 2A"
                    },
                    {
                        "Fn::If": [
                            "PrivateSubnetATag1Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag1"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag1"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PrivateSubnetATag2Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag2"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PrivateSubnetATag2"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ]
            }
        },
        "PublicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet1CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public subnet 1"
                    },
                    {
                        "Fn::If": [
                            "PublicSubnetTag1Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag1"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag1"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PublicSubnetTag2Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag2"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag2"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ],
                "MapPublicIpOnLaunch": true
            }
        },
        "PublicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet2CIDR"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public subnet 2"
                    },
                    {
                        "Fn::If": [
                            "PublicSubnetTag1Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag1"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag1"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    },
                    {
                        "Fn::If": [
                            "PublicSubnetTag2Condition",
                            {
                                "Key": {
                                    "Fn::Select": [
                                        "0",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag2"
                                                }
                                            ]
                                        }
                                    ]
                                },
                                "Value": {
                                    "Fn::Select": [
                                        "1",
                                        {
                                            "Fn::Split": [
                                                "=",
                                                {
                                                    "Ref": "PublicSubnetTag2"
                                                }
                                            ]
                                        }
                                    ]
                                }
                            },
                            {
                                "Ref": "AWS::NoValue"
                            }
                        ]
                    }
                ]
            }
        },
        "PrivateSubnet1ARouteTable": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 1A"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PrivateSubnet1ARoute": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnet1ARouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway1"
                }
            }
        },
        "PrivateSubnet1ARouteTableAssociation": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet1A"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnet1ARouteTable"
                }
            }
        },
        "PrivateSubnet2ARouteTable": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Private subnet 2A"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "PrivateSubnet2ARoute": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrivateSubnet2ARouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "NatGatewayId": {
                    "Ref": "NATGateway2"
                }
            }
        },
        "PrivateSubnet2ARouteTableAssociation": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrivateSubnet2A"
                },
                "RouteTableId": {
                    "Ref": "PrivateSubnet2ARouteTable"
                }
            }
        },
        "PublicSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Public Subnets"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicSubnetRoute": {
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "PublicSubnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                },
                "RouteTableId": {
                    "Ref": "PublicSubnetRouteTable"
                }
            }
        },
        "NAT1EIP": {
            "Condition": "PrivateSubnetsCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NAT2EIP": {
            "Condition": "PrivateSubnetsCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATGateway1": {
            "Condition": "PrivateSubnetsCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NAT1EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            }
        },
        "NATGateway2": {
            "Condition": "PrivateSubnetsCondition",
            "DependsOn": "VPCGatewayAttachment",
            "Type": "AWS::EC2::NatGateway",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NAT2EIP",
                        "AllocationId"
                    ]
                },
                "SubnetId": {
                    "Ref": "PublicSubnet2"
                }
            }
        },
        "S3VPCGatewayEndpoint": {
            "Condition": "PrivateSubnetsCondition",
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": "*",
                            "Effect": "Allow",
                            "Resource": "*",
                            "Principal": "*"
                        }
                    ]
                },
                "RouteTableIds": [
                    {
                        "Ref": "PrivateSubnet1ARouteTable"
                    },
                    {
                        "Ref": "PrivateSubnet2ARouteTable"
                    }
                ],
                "ServiceName": {
                    "Fn::Sub": "com.amazonaws.${AWS::Region}.s3"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InterfaceEndpoint": {
            "Type": "AWS::EC2::VPCEndpoint",
            "Properties": {
                "PrivateDnsEnabled": true,
                "SecurityGroupIds": [
                    {
                        "Ref": "InterfaceSecurityGroup"
                    }
                ],
                "ServiceName": {
                    "Fn::Join": [
                        "",
                        [
                            "com.amazonaws.",
                            {
                                "Ref": "AWS::Region"
                            },
                            ".sqs"
                        ]
                    ]
                },
                "SubnetIds": [
                    {
                        "Ref": "PrivateSubnet1A"
                    },
                    {
                        "Ref": "PrivateSubnet2A"
                    }
                ],
                "VpcEndpointType": "Interface",
                "VpcId": {
                    "Ref": "VPC"
                }
            }
        },
        "InterfaceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Controls Inbound Access to the VPC Interface Endpoint from within the VPC",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "FromPort": "0",
                        "ToPort": "65535",
                        "IpProtocol": "tcp",
                        "CidrIp": "10.0.0.0/8"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Interface-Endpoint-Security-Group"
                    }
                ]
            }
        },
        "EC2Instance1": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": "t2.micro",
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "KeyName": {
                    "Ref": "keypairName"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile1"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet1A"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "SecurityGroup1"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-ec2"
                        }
                    }
                ]
            },
            "DependsOn": [
                "Cloud9Instance"
            ]
        },
        "SecurityGroup1": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-security-group"
                },
                "GroupDescription": "Inbound SSH Access from within the VPC",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "FromPort": "22",
                        "ToPort": "22",
                        "IpProtocol": "tcp",
                        "CidrIp": "10.0.0.0/8"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-security-group"
                        }
                    }
                ]
            }
        },
        "InstanceProfile1": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-instanceprofile"
                },
                "Path": "/vpcelab/",
                "Roles": [
                    {
                        "Ref": "IAMRole1"
                    }
                ]
            }
        },
        "IAMPolicy1": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-sqs-access-policy"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:SendMessage",
                                "sqs:ReceiveMessage",
                                "sqs:GetQueueUrl",
                                "sqs:GetQueueAttributes",
                                "sqs:ListQueues",
                                "sqs:ListQueueTags"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "SQSQueue",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "IAMRole1"
                    }
                ]
            }
        },
        "IAMPolicy1a": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-s3-access-policy"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket",
                                "s3:*Object"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:s3:::${UnrestrictedS3Bucket}"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket",
                                "s3:*Object"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:s3:::${RestrictedS3Bucket}"
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "IAMRole1"
                    }
                ]
            }
        },
        "IAMRole1": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-role"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/vpcelab/"
            }
        },
        "EC2Instance2": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "InstanceType": "t2.micro",
                "ImageId": {
                    "Ref": "LatestAmiId"
                },
                "KeyName": {
                    "Ref": "keypairName"
                },
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile2"
                },
                "SubnetId": {
                    "Ref": "PrivateSubnet2A"
                },
                "SecurityGroupIds": [
                    {
                        "Ref": "SecurityGroup2"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName2}-ec2"
                        }
                    }
                ]
            },
            "DependsOn": [
                "Cloud9Instance"
            ]
        },
        "SecurityGroup2": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName2}-security-group"
                },
                "GroupDescription": "Inbound SSH Access from within the VPC",
                "VpcId": {
                    "Ref": "VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "FromPort": "22",
                        "ToPort": "22",
                        "IpProtocol": "tcp",
                        "CidrIp": "10.0.0.0/8"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName2}-security-group"
                        }
                    }
                ]
            }
        },
        "InstanceProfile2": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName2}-instanceprofile"
                },
                "Path": "/vpcelab/",
                "Roles": [
                    {
                        "Ref": "IAMRole2"
                    }
                ]
            }
        },
        "IAMPolicy2": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName2}-policy"
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "sqs:ReceiveMessage",
                                "sqs:DeleteMessage",
                                "sqs:GetQueueUrl",
                                "sqs:GetQueueAttributes",
                                "sqs:ListQueues"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "SQSQueue",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "IAMRole2"
                    }
                ]
            }
        },
        "IAMPolicy2a": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName1}-s3-access-policy"
                },
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket",
                                "s3:*Object"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:s3:::${UnrestrictedS3Bucket}"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket",
                                "s3:*Object"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:s3:::${RestrictedS3Bucket}"
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "IAMRole2"
                    }
                ]
            }
        },
        "IAMRole2": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-${AppName2}-role"
                },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/vpcelab/"
            }
        },
        "SQSQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "QueueName": {
                    "Fn::Sub": "${AWS::StackName}-${AWS::Region}-sqs-queue"
                }
            }
        },
        "UnrestrictedS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Sub": "${AWS::AccountId}-${AWS::StackName}-${AWS::Region}-unrestrictedbucket"
                },
                "AccessControl": "Private"
            }
        },
        "RestrictedS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::Sub": "${AWS::AccountId}-${AWS::StackName}-${AWS::Region}-restrictedbucket"
                },
                "AccessControl": "Private"
            }
        },
        "Cloud9Instance": {
            "Type": "AWS::Cloud9::EnvironmentEC2",
            "Properties": {
                "AutomaticStopTimeMinutes": 60,
                "Description": "Cloud9 instance used to validate vpc endpoint controls in lab",
                "InstanceType": "t2.micro",
                "Name": {
                    "Fn::Sub": "${AWS::StackName}"
                },
                "SubnetId": {
                    "Ref": "PublicSubnet1"
                }
            },
            "DependsOn": [
                "keypair"
            ]
        },
        "keypair": {
            "Type": "Custom::keypair",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "keypairFunction",
                        "Arn"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "keypairName": {
                    "Ref": "keypairName"
                }
            }
        },
        "keypairFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": {
                        "Ref": "S3Bucket"
                    },
                    "S3Key": {
                        "Ref": "S3Key"
                    }
                },
                "Handler": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "ModuleName"
                            },
                            ".handler"
                        ]
                    ]
                },
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Timeout": "30"
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "lambdacustomresourcepolicyforlab",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:CreateKeyPair",
                                        "ec2:DeleteKeyPair"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ssm:PutParameter",
                                        "ssm:DeleteParameter",
                                        "ssm:GetParameterHistory",
                                        "ssm:GetParametersByPath",
                                        "ssm:GetParameters",
                                        "ssm:GetParameter",
                                        "ssm:DeleteParameters"
                                    ],
                                    "Resource": "arn:aws:ssm:*:*:parameter/labsshkey"
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "StackName": {
            "Description": "Stack name.",
            "Value": {
                "Fn::Sub": "${AWS::StackName}"
            }
        },
        "VPCID": {
            "Value": {
                "Ref": "VPC"
            },
            "Description": "VPC ID",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-VPCID"
                }
            }
        },
        "Cloud9Instance": {
            "Value": {
                "Ref": "Cloud9Instance"
            },
            "Description": "Cloud9Instance",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-Cloud9Instance"
                }
            }
        },
        "Cloud9InstanceURL": {
            "Description": "URL to Access Cloud9 lab instance",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://us-west-2.console.aws.amazon.com/cloud9/ide/",
                        {
                            "Ref": "Cloud9Instance"
                        }
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-Cloud9InstanceURL"
                }
            }
        },
        "EC2Instance1IP": {
            "Description": "IP Address for SalesApp",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance1",
                    "PrivateIp"
                ]
            },
            "Export": {
                "Name": "SalesAppIP"
            }
        },
        "SSHtoSalesApp": {
            "Description": "SSH string to connect to the sales app EC2 instance",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "ssh ec2-user@",
                        {
                            "Fn::GetAtt": [
                                "EC2Instance1",
                                "PrivateIp"
                            ]
                        },
                        " -i ",
                        {
                            "Ref": "keypairName"
                        },
                        ".pem"
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-An-SSH-string-to-connect-to-sales-app"
                }
            }
        },
        "EC2Instance2IP": {
            "Description": "IP Address for ReportsEngine",
            "Value": {
                "Fn::GetAtt": [
                    "EC2Instance2",
                    "PrivateIp"
                ]
            },
            "Export": {
                "Name": "ReportsEngineIP"
            }
        },
        "SSHtoReportsEngine": {
            "Description": "SSH string to connect to the sales app EC2 instance",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "ssh ec2-user@",
                        {
                            "Fn::GetAtt": [
                                "EC2Instance2",
                                "PrivateIp"
                            ]
                        },
                        " -i ",
                        {
                            "Ref": "keypairName"
                        },
                        ".pem"
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-An-SSH-string-to-connect-to-reports-engine"
                }
            }
        },
        "S3VPCGatewayEndpoint": {
            "Condition": "PrivateSubnetsCondition",
            "Description": "S3 VPC Endpoint",
            "Value": {
                "Ref": "S3VPCGatewayEndpoint"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-S3VPCGatwayEndpoint"
                }
            }
        },
        "UnrestrictedS3Bucket": {
            "Description": "UnrestrictedS3Bucket",
            "Value": {
                "Ref": "UnrestrictedS3Bucket"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-UnrestrictedS3Bucket"
                }
            }
        },
        "UnrestrictedS3BucketPermsURL": {
            "Description": "UnrestrictedS3BucketPermsURL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://s3.console.aws.amazon.com/s3/buckets/",
                        {
                            "Ref": "UnrestrictedS3Bucket"
                        },
                        "/?region=us-west-2&tab=permissions"
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-UnrestrictedS3BucketPermsURL"
                }
            }
        },
        "RestrictedS3Bucket": {
            "Description": "RestrictedS3Bucket",
            "Value": {
                "Ref": "RestrictedS3Bucket"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-RestrictedS3Bucket"
                }
            }
        },
        "RestrictedS3BucketPermsURL": {
            "Description": "RestrictedS3BucketPermsURL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://s3.console.aws.amazon.com/s3/buckets/",
                        {
                            "Ref": "RestrictedS3Bucket"
                        },
                        "/?region=us-west-2&tab=permissions"
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-RestrictedS3BucketPermsURL"
                }
            }
        },
        "IAMRoleForSalesApp": {
            "Description": "IAMRoleForSalesApp",
            "Value": {
                "Ref": "IAMRole1"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-IAMRoleForSalesApp"
                }
            }
        },
        "IAMRoleForSalesAppURL": {
            "Description": "IAMRoleForSalesAppURL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://console.aws.amazon.com/iam/home?region=us-west-2#/roles/",
                        {
                            "Ref": "IAMRole1"
                        }
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-IAMRoleForSalesAppURL"
                }
            }
        },
        "IAMRoleForReportsEngine": {
            "Description": "IAMRoleForReportsEngine",
            "Value": {
                "Ref": "IAMRole2"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-IAMRoleForReportsEngine"
                }
            }
        },
        "IAMRoleForReportsEngineURL": {
            "Description": "IAMRoleForReportsEngineURL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://console.aws.amazon.com/iam/home?region=us-west-2#/roles/",
                        {
                            "Ref": "IAMRole2"
                        }
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-IAMRoleForReportsEngineURL"
                }
            }
        },
        "SecurityGroupForSalesApp": {
            "Description": "SecurityGroupForSalesApp",
            "Value": {
                "Ref": "SecurityGroup1"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SecurityGroupForSalesApp"
                }
            }
        },
        "SecurityGroupForSalesAppURL": {
            "Description": "SecurityGroupForSalesAppURL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://us-west-2.console.aws.amazon.com/ec2/home?region=us-west-2#SecurityGroups:search=",
                        {
                            "Ref": "SecurityGroup1"
                        },
                        ";sort=groupName"
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SecurityGroupForSalesAppURL"
                }
            }
        },
        "SecurityGroupForReportsEngine": {
            "Description": "SecurityGroupForReportsEngine",
            "Value": {
                "Ref": "SecurityGroup2"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SecurityGroupForReportsEngine"
                }
            }
        },
        "SecurityGroupForReportsEngineURL": {
            "Description": "SecurityGroupForSalesAppURL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://us-west-2.console.aws.amazon.com/ec2/home?region=us-west-2#SecurityGroups:search=",
                        {
                            "Ref": "SecurityGroup2"
                        },
                        ";sort=groupName"
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SecurityGroupForReportsEngineURL"
                }
            }
        },
        "InterfaceSecurityGroupURL": {
            "Description": "InterfaceSecurityGroupURL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://us-west-2.console.aws.amazon.com/ec2/home?region=us-west-2#SecurityGroups:search=",
                        {
                            "Ref": "InterfaceSecurityGroup"
                        },
                        ";sort=groupName"
                    ]
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-InterfaceSecurityGroupURL"
                }
            }
        },
        "SQSQueueName": {
            "Description": "Name newly created SQS Queue",
            "Value": {
                "Fn::GetAtt": [
                    "SQSQueue",
                    "QueueName"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SQSQueueName"
                }
            }
        },
        "SQSQueueARN": {
            "Description": "ARN of newly created SQS Queue",
            "Value": {
                "Fn::GetAtt": [
                    "SQSQueue",
                    "Arn"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SQSQueueARN"
                }
            }
        },
        "SQSQueueURL": {
            "Description": "SQSQueueURL of newly created SQS Queue",
            "Value": {
                "Ref": "SQSQueue"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SQSQueueURL"
                }
            }
        },
        "SQSVPCInterfaceEndpoint": {
            "Description": "Interface Endpoint",
            "Value": {
                "Ref": "InterfaceEndpoint"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-SQSVPCInterfaceEndpoint"
                }
            }
        },
        "PrivateSubnet1ARouteTable": {
            "Description": "PrivateSubnet1ARouteTable",
            "Value": {
                "Ref": "PrivateSubnet1ARouteTable"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet1ARouteTable"
                }
            }
        },
        "PrivateSubnet2ARouteTable": {
            "Description": "PrivateSubnet2ARouteTable",
            "Value": {
                "Ref": "PrivateSubnet2ARouteTable"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-PrivateSubnet2ARouteTable"
                }
            }
        },
        "AWSAccountID": {
            "Description": "AWS Account ID used for this lab",
            "Value": {
                "Fn::Sub": "${AWS::AccountId}"
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-AWSAccountID"
                }
            }
        },
        "keypairName": {
            "Description": "Key pair created on EC2 instances",
            "Value": "labssh",
            "Export": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-keypairName"
                }
            }
        }
    }
}